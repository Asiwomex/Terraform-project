name: Terraform Deploy (Dev Environment)

# Run the workflow on every push to the main branch
on:
  push:
    branches:
      - m # Change to the branch you want to trigger the workflow on    

# Define the jobs to be executed
jobs:
  terraform:
    name: Terraform Apply
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
    # Step 1: Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up Terraform
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    # Step 3: Configure AWS credentials using GitHub Secrets
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    # Step 4: Change to the dev environment directory
    - name: Change to the dev environment
      run: cd environments/dev

    # Step 5: Initialize Terraform in the dev environment directory
    - name: Terraform Init
      working-directory: environments/dev
      run: terraform init

    # Step 6: Plan Terraform deployment in the dev environment directory
    - name: Terraform Plan
      working-directory: environments/dev
      run: terraform plan -out=tfplan

    # Step 7: Apply Terraform configuration in the dev environment directory
    - name: Terraform Apply
      working-directory: environments/dev
      if: github.ref == 'refs/heads/main'
      run: terraform apply -auto-approve tfplan
